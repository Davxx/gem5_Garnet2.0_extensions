#!/usr/bin/env bash
#
# Script for running GarnetStandalone simulations
#
# Usage: ./r n_cpus n_rows topology_py_file routing_algorithm \
#            flit_injection_rate synthetic_traffic_type n_cycles
#
#                 n_cpus: number of cpu's
#                 n_rows: number of rows in the topology structure
#       topology_py_file: name of the .py-file in configs/topologies/
#      routing_algorithm: routing algorithm in network, implemented in
#                         src/mem/ruby/network/garnet2.0/RoutingUnit.cc:
#                           0: Weight-based table
#                           1: XY (for Mesh)
#                           2: Random (custom)
#                           3: Adaptive (custom)
#    flit_injection_rate: traffic injection rate in packets/node/cycle
# synthetic_traffic_type: uniform_random, tornado, bit_complement, bit_reverse,
#                         bit_rotation, neighbor, shuffle, transpose
#               n_cycles: total number of cycles for which the simulation should run

# Defaults:
HIDEWARNERROR=0         # Bool: hide warnings and errors
HIDESTDOUT=0            # Bool: hide stdout
GARNETDEBUG=1           # Bool: enable Ruby/Garnet2.0 debug printing to `debug.txt`
NVCS=2                  # Number of virtual channels (VC) per virtual network
NBUFFERS_PER_DATA_VC=8  # Number of buffers per data VC
NBUFFERS_PER_CTRL_VC=1  # Number of buffers per data VC
LINKWIDTHBITS=32        # Width in bits for all links inside the network
DEADLOCKTHRESHOLD=50000 # Network-level deadlock threshold
USE_ESCAPE_VC=1         # Bool: Use VC=0 as Escape VC. Requires NVCS>=2
INJVNET=0               # Only inject in this vnet (0, 1 or 2).
                        #   0 and 1 are 1-flit, 2 is 5-flit.
                        #   Set to -1 to inject randomly in all vnets.
NCPU=16
NROWS=2
TOPO=Ring
IJRATE=0.99
ROUTINGALGO=0
SYNTH=uniform_random
NCYCLES=5000

# Send between specific router id's. -1: disable
SENDER_ID=-1
DEST_ID=-1

if [ "$#" -gt 0 ] && [[ $1 =~ ^[0-9]+$ ]]; then
    NCPU=$1
else
    # Print help info
    sed -n "3,20p" rungarnet
    exit
fi
if [ "$#" -gt 1 ]; then
    NROWS=$2
fi
if [ "$#" -gt 2 ]; then
    TOPO=$3
fi
if [ "$#" -gt 3 ]; then
    ROUTINGALGO=$4
fi
if [ "$#" -gt 4 ]; then
    IJRATE=$5
fi
if [ "$#" -gt 5 ]; then
    SYNTH=$6
fi
if [ "$#" -gt 6 ]; then
    NCYCLES=$7
fi

# Suffix output dir name with routing algorithm
case "$ROUTINGALGO" in
    0) RALGNAME=weighted_table_routing ;;
    1) RALGNAME=mesh_xy_routing ;;
    2) RALGNAME=random_routing ;;
    3) RALGNAME=adaptive_routing ;;
    *) RALGNAME=unknown_routing ;;
esac

NCOLS=$(($NCPU/$NROWS))
OUTDIR="m5out/"$TOPO-$NCPU"core-"$NROWS"x"$NCOLS-$SYNTH-$IJRATE-$RALGNAME

# Generate output dir name
if [ -d $OUTDIR ]; then
    MAXOUTDIRS=99
    for ((i=2;i<=MAXOUTDIRS;i++)); do
        NOUTDIR=$OUTDIR"-"$i
        if [ ! -d $NOUTDIR ]; then
            OUTDIR=$NOUTDIR
            break
        fi
    done
fi
mkdir -p $OUTDIR

# Redirect stdout to file
if [ $GARNETDEBUG -eq 1 ]; then
    GARNETDEBUG_FLAGS="--debug-flags=RubyNetwork,GarnetSyntheticTraffic"
#    GARNETDEBUG_FLAGS=""
    GARNETDEBUG_TOFILE="$OUTDIR/debug.txt"
else
    GARNETDEBUG_FLAGS=""
    GARNETDEBUG_TOFILE=""
    GARNETDEBUG_PIPE=""
fi

# Redirect stdout to /dev/null
if [ $HIDESTDOUT -eq 1 ]; then
    HIDESTDOUT="-r --stdout-file=/dev/null"
else
    HIDESTDOUT=""
fi

# Redirect stderr /dev/null
if [ $HIDEWARNERROR -eq 1 ]; then
    HIDEWARNERROR="-e --stderr-file=/dev/null"
else
    HIDEWARNERROR=""
fi

SEND_TO_ROUTER_IDS=""
if [ ! $SENDER_ID -eq -1 ]; then
    SEND_TO_ROUTER_IDS+="--single-sender-id=$SENDER_ID"
fi
if [ ! $DEST_ID -eq -1 ]; then
    SEND_TO_ROUTER_IDS+=" --single-dest-id=$DEST_ID"
fi

if [ $USE_ESCAPE_VC -eq 1 ]; then
    USE_ESCAPE_VC="--escapevc"
else
    USE_ESCAPE_VC=""
fi

# Set environment variable for recognizing simulation type in gem5 .py-files
export GEM5SIMTYPE=GarnetStandalone

RUNCMD="./build/NULL/gem5.debug -v $HIDEWARNERROR $HIDESTDOUT $GARNETDEBUG_FLAGS -d $OUTDIR configs/example/garnet_synth_traffic.py \
--network=garnet2.0 \
--num-cpus=$NCPU \
--num-dirs=$NCPU \
--topology=$TOPO \
--mesh-rows=$NROWS \
--sim-cycles=$NCYCLES \
--injectionrate=$IJRATE \
--synthetic=$SYNTH \
--routing-algorithm=$ROUTINGALGO \
--link-width-bits=$LINKWIDTHBITS \
--vcs-per-vnet=$NVCS \
--buffers-per-data-vc=$NBUFFERS_PER_DATA_VC \
--buffers-per-ctrl-vc=$NBUFFERS_PER_CTRL_VC \
--garnet-deadlock-threshold=$DEADLOCKTHRESHOLD \
--inj-vnet=$INJVNET \
--tikz $USE_ESCAPE_VC $SEND_TO_ROUTER_IDS"

redirect_cmd() {
    if [ $GARNETDEBUG -eq 1 ]; then
        "$@" > "$GARNETDEBUG_TOFILE"
        return $?
    else
        "$@"
        return $?
    fi
}

redirect_cmd $RUNCMD

# Simulation output parsing
EXITCODE=$?
if [ $GARNETDEBUG -eq 1 ]; then
    python grepdebug.py "$GARNETDEBUG_TOFILE"
fi
if [ $EXITCODE -eq 0 ]; then
    python grepnetworkstats.py $OUTDIR
else
    rmdir $OUTDIR &> /dev/null
fi
